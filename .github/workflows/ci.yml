name: Build Test Deploy Laravel

on:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "main" ]

env:
  namespace: 'janortop5'
  repository: 'laravel'
  image_tag: 'v1'
  registry: 'docker.io'
  DB_DATABASE: ${{ secrets.DB_DATABASE }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  server_user: 'root'
  server_ip: '157.230.127.122'
  prod_server_ip: '209.38.201.50'

jobs:
  approval:
    runs-on: ubuntu-latest
    steps:
      - name: Request Approval
        uses: actions/github-script@v5
        with:
          script: |
            const response = await github.pulls.createReview({
              ...context.repo,
              pull_number: context.payload.pull_request.number,
              event: 'APPROVE'
            });
            console.log(response);

      - name: Set Approval Status
        id: set-approval
        run: |
          # Perform checks to determine if approval was granted
          if [ "$APPROVAL_REQUIRED" == "true" ]; then
            echo "::set-output name=approval-status::approved"
          else
            echo "::set-output name=approval-status::not-approved"

  build:
    runs-on: ubuntu-latest # ${{matrix.os}}
#     strategy:
#       matrix:
#         os: [ubuntu-latest, windows-latest, macOS-latest]
        
    steps:
    - uses: actions/checkout@v3    
    
    - name: Set up Image build
      run: |
        echo '${{ secrets.ENV_FILE }}' > .env.example
        cat .env.example

    - uses: mr-smithers-excellent/docker-build-push@v6
      name: Build & push Docker image
      with:
        image: $namespace/$repository
        tags: $image_tag, latest
        registry: $registry
        dockerfile: Dockerfile
        directory: .
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
  laravel_test:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - uses: actions/checkout@v3 
      
      - name: Test Laravel
        run: |
          echo "${{ secrets.STAGING_KEY }}" > testing.pem
          echo '${{ secrets.ENV_FILE }}' > .env.example
          cp .env.example .env
          echo "namespace=$namespace" >> .env 
          echo "repository=$repository" >> .env 
          chmod 400 testing.pem
          scp -o StrictHostKeyChecking=no -i testing.pem docker-compose.yml $server_user@$server_ip:~
          scp -o StrictHostKeyChecking=no -i testing.pem .env $server_user@$server_ip:~
          ssh -o StrictHostKeyChecking=no -i testing.pem $server_user@$server_ip "
          docker ps -aq | xargs docker stop || true | xargs docker rm || true &&
          docker compose up -d --pull always && sleep 35 && 
          docker compose exec laravel php artisan migrate --seed --env=development && 
          docker compose exec laravel php artisan test --env=development
          docker compose exec laravel php artisan migrate --seed --env=development
          chown -R www-data:www-data "/var/lib/docker/volumes/${{ env.server_user }}_laravel-src/" 
          chmod -R 775 "/var/lib/docker/volumes/${{ env.server_user }}_laravel-src/"
          "

  deploy:
    runs-on: ubuntu-latest
    needs: [ laravel_test, approval ]

    steps:
      - uses: actions/checkout@v3

      - name: Check Approval
        id: check-approval
        run: echo "Approval status:\ ${{ needs.approval.outputs.approval-status }}"
        
      - name: Deploy to Production
        if: steps.check-approval.outputs.approval-status == 'approved'
        run: |
          echo "${{ secrets.PROD_KEY }}" > prod.pem
          echo '${{ secrets.ENV_FILE }}' > .env.example
          cp .env.example .env
          echo "namespace=$namespace" >> .env 
          echo "repository=$repository" >> .env 
          chmod 400 prod.pem
          scp -o StrictHostKeyChecking=no -i prod.pem docker-compose.yml $server_user@$prod_server_ip:~
          scp -o StrictHostKeyChecking=no -i prod.pem .env $server_user@$prod_server_ip:~
          ssh -o StrictHostKeyChecking=no -i prod.pem $server_user@$prod_server_ip "
          docker ps -aq | xargs docker stop || true | xargs docker rm || true &&
          docker compose up -d --pull always
          chown -R www-data:www-data "/var/lib/docker/volumes/${{ env.server_user }}_laravel-src/" 
          chmod -R 775 "/var/lib/docker/volumes/${{ env.server_user }}_laravel-src/"
          "
          
